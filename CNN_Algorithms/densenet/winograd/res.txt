Not using the GPUs
Used the CPU





(ai3_env) [wxs428@gput068 winograd]$ ls
job.sh  python.py
(ai3_env) [wxs428@gput068 winograd]$ vim python.py 
(ai3_env) [wxs428@gput068 winograd]$ python python.py 
================================================================================
DENSENET121 WINOGRAD IMPLEMENTATION WITH AI3 LIBRARY
================================================================================
CUDA Device Information:
  ✓ CUDA is available
  ✓ CUDA version: 12.4
  ✓ Number of GPUs: 1
  ✓ Current GPU: NVIDIA L40S
  ✓ GPU Memory: 44.4 GB
  ✓ CUDA context initialized successfully

Configuration:
  Model: DenseNet121
  Algorithm: winograd
  Device: cuda
  Batch size: 1
  Iterations per input size: 10
  Input sizes to test: 1

Loading DenseNet121 model...
✓ DenseNet121 model loaded successfully

Original model loaded. Analyzing structure...
Found 120 Conv2D layers in original model

Applying AI3 winograd algorithm conversion...
✓ AI3 conversion completed successfully

============================================================
MODEL STRUCTURE ANALYSIS
============================================================
✓ AI3 Layer: features.conv0
  - Algorithm: winograd
  - Weight shape: torch.Size([64, 3, 7, 7])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock1.denselayer1.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 64, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock1.denselayer1.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock1.denselayer2.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 96, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock1.denselayer2.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock1.denselayer3.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 128, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock1.denselayer3.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock1.denselayer4.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 160, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock1.denselayer4.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock1.denselayer5.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 192, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock1.denselayer5.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock1.denselayer6.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 224, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock1.denselayer6.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.transition1.conv
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 256, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock2.denselayer1.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 128, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock2.denselayer1.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock2.denselayer2.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 160, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock2.denselayer2.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock2.denselayer3.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 192, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock2.denselayer3.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock2.denselayer4.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 224, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock2.denselayer4.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock2.denselayer5.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 256, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock2.denselayer5.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock2.denselayer6.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 288, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock2.denselayer6.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock2.denselayer7.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 320, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock2.denselayer7.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock2.denselayer8.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 352, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock2.denselayer8.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock2.denselayer9.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 384, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock2.denselayer9.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock2.denselayer10.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 416, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock2.denselayer10.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock2.denselayer11.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 448, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock2.denselayer11.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock2.denselayer12.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 480, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock2.denselayer12.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.transition2.conv
  - Algorithm: winograd
  - Weight shape: torch.Size([256, 512, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock3.denselayer1.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 256, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock3.denselayer1.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock3.denselayer2.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 288, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock3.denselayer2.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock3.denselayer3.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 320, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock3.denselayer3.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock3.denselayer4.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 352, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock3.denselayer4.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock3.denselayer5.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 384, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock3.denselayer5.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock3.denselayer6.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 416, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock3.denselayer6.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock3.denselayer7.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 448, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock3.denselayer7.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock3.denselayer8.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 480, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock3.denselayer8.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock3.denselayer9.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 512, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock3.denselayer9.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock3.denselayer10.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 544, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock3.denselayer10.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock3.denselayer11.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 576, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock3.denselayer11.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock3.denselayer12.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 608, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock3.denselayer12.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock3.denselayer13.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 640, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock3.denselayer13.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock3.denselayer14.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 672, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock3.denselayer14.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock3.denselayer15.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 704, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock3.denselayer15.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock3.denselayer16.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 736, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock3.denselayer16.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock3.denselayer17.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 768, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock3.denselayer17.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock3.denselayer18.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 800, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock3.denselayer18.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock3.denselayer19.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 832, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock3.denselayer19.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock3.denselayer20.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 864, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock3.denselayer20.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock3.denselayer21.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 896, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock3.denselayer21.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock3.denselayer22.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 928, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock3.denselayer22.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock3.denselayer23.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 960, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock3.denselayer23.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock3.denselayer24.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 992, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock3.denselayer24.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.transition3.conv
  - Algorithm: winograd
  - Weight shape: torch.Size([512, 1024, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock4.denselayer1.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 512, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock4.denselayer1.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock4.denselayer2.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 544, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock4.denselayer2.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock4.denselayer3.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 576, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock4.denselayer3.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock4.denselayer4.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 608, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock4.denselayer4.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock4.denselayer5.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 640, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock4.denselayer5.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock4.denselayer6.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 672, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock4.denselayer6.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock4.denselayer7.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 704, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock4.denselayer7.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock4.denselayer8.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 736, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock4.denselayer8.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock4.denselayer9.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 768, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock4.denselayer9.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock4.denselayer10.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 800, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock4.denselayer10.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock4.denselayer11.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 832, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock4.denselayer11.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock4.denselayer12.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 864, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock4.denselayer12.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock4.denselayer13.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 896, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock4.denselayer13.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock4.denselayer14.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 928, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock4.denselayer14.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock4.denselayer15.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 960, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock4.denselayer15.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True
✓ AI3 Layer: features.denseblock4.denselayer16.conv1
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 992, 1, 1])
  - Winograd suitable (3x3): False
✓ AI3 Layer: features.denseblock4.denselayer16.conv2
  - Algorithm: winograd
  - Weight shape: torch.Size([32, 128, 3, 3])
  - Winograd suitable (3x3): True

============================================================
CONVERSION SUMMARY:
  Total Conv2D layers: 120
  AI3 converted: 120
  Winograd layers: 120
  PyTorch remaining: 0
  Conversion rate: 100.0%
  Winograd efficiency: 100.0%
============================================================


Analyzing device placement after AI3 conversion...
✓ AI3 device distribution:
  - Parameters on CUDA: 0/364
  - Parameters on CPU: 364/364
  - Mixed device usage is expected with AI3
  - AI3 layers on CUDA: 0
  - AI3 layers on CPU: 120

Starting performance testing...
This will test the model with various input sizes to measure Winograd performance.

[1/1] Testing with input size 341x341
  ✓ Created input tensor: torch.Size([1, 3, 341, 341]) on cpu
  GPU Memory - Allocated: 0.00 GB, Reserved: 0.00 GB
  Running warmup...
  ✗ Error during warmup: winograd not implemented for stride not equal to 1 see `Supported Algorithms for cudnnConvolutionForward() 2D Convolutions. Filter descriptor wDesc: _NCHW` at https://docs.nvidia.com/deeplearning/cudnn/latest/api/cudnn-cnn-library.html
  Note: This may indicate memory or device issues
  GPU Memory at error: 0.00 GB allocated
  Measuring performance over 10 iterations...
    Iteration 1/10
  ✗ Error during performance measurement: winograd not implemented for stride not equal to 1 see `Supported Algorithms for cudnnConvolutionForward() 2D Convolutions. Filter descriptor wDesc: _NCHW` at https://docs.nvidia.com/deeplearning/cudnn/latest/api/cudnn-cnn-library.html

================================================================================
DENSENET121 WINOGRAD TESTING COMPLETED
================================================================================
Results saved to:
  - Overall performance: /home/wxs428/densenet/winograd/DenseNet121_winograd_cuda_overall.csv
  - Layer-wise performance: /home/wxs428/densenet/winograd/DenseNet121_winograd_cuda_layers.csv

Summary:
  ✓ Tested 1 different input sizes
  ✓ 10 iterations per input size
  ✓ AI3 Winograd algorithm optimization
  ✓ 120 layers converted to AI3
  ✓ 120 layers using Winograd algorithm
  ✓ Comprehensive layer-wise performance analysis

Next steps:
  1. Analyze the CSV files to compare AI3 Winograd performance vs other algorithms
  2. Run the same test with different algorithms (direct, gemm, smm, etc.) for comparison
  3. Compare Winograd-suitable (3x3) vs other convolution performance
================================================================================
(ai3_env) [wxs428@gput068 winograd]$ 