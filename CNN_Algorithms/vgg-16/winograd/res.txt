(ai3_env) [wxs428@gput053 winograd]$ ls
job.sh  python.py
(ai3_env) [wxs428@gput053 winograd]$ vim python.py 
(ai3_env) [wxs428@gput053 winograd]$ python python.py 
================================================================================
VGG16 WINOGRAD IMPLEMENTATION WITH AI3 LIBRARY
================================================================================
CUDA Device Information:
  ✓ CUDA is available
  ✓ CUDA version: 12.4
  ✓ Number of GPUs: 1
  ✓ Current GPU: Tesla V100-SXM2-32GB
  ✓ GPU Memory: 31.7 GB
  ✓ CUDA context initialized successfully

Configuration:
  Model: VGG16
  Algorithm: winograd
  Device: cuda
  Batch size: 1
  Iterations per input size: 10
  Input sizes to test: 1

Loading VGG16 model...
✓ VGG16 model loaded successfully

Original model loaded. Analyzing structure...
Found 13 Conv2D layers in original model

Applying AI3 winograd algorithm conversion...
✓ AI3 conversion completed successfully

============================================================
MODEL STRUCTURE ANALYSIS
============================================================
✓ AI3 Layer: features.0
  - Algorithm: winograd
  - Weight shape: torch.Size([64, 3, 3, 3])
✓ AI3 Layer: features.2
  - Algorithm: winograd
  - Weight shape: torch.Size([64, 64, 3, 3])
✓ AI3 Layer: features.5
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 64, 3, 3])
✓ AI3 Layer: features.7
  - Algorithm: winograd
  - Weight shape: torch.Size([128, 128, 3, 3])
✓ AI3 Layer: features.10
  - Algorithm: winograd
  - Weight shape: torch.Size([256, 128, 3, 3])
✓ AI3 Layer: features.12
  - Algorithm: winograd
  - Weight shape: torch.Size([256, 256, 3, 3])
✓ AI3 Layer: features.14
  - Algorithm: winograd
  - Weight shape: torch.Size([256, 256, 3, 3])
✓ AI3 Layer: features.17
  - Algorithm: winograd
  - Weight shape: torch.Size([512, 256, 3, 3])
✓ AI3 Layer: features.19
  - Algorithm: winograd
  - Weight shape: torch.Size([512, 512, 3, 3])
✓ AI3 Layer: features.21
  - Algorithm: winograd
  - Weight shape: torch.Size([512, 512, 3, 3])
✓ AI3 Layer: features.24
  - Algorithm: winograd
  - Weight shape: torch.Size([512, 512, 3, 3])
✓ AI3 Layer: features.26
  - Algorithm: winograd
  - Weight shape: torch.Size([512, 512, 3, 3])
✓ AI3 Layer: features.28
  - Algorithm: winograd
  - Weight shape: torch.Size([512, 512, 3, 3])

============================================================
CONVERSION SUMMARY:
  Total Conv2D layers: 13
  AI3 converted: 13
  PyTorch remaining: 0
  Conversion rate: 100.0%
============================================================


Analyzing device placement after AI3 conversion...
✓ AI3 device distribution:
  - Parameters on CUDA: 0/32
  - Parameters on CPU: 32/32
  - Mixed device usage is expected with AI3
  - AI3 layers on CUDA: 0
  - AI3 layers on CPU: 13

Starting performance testing...
This will test the model with various input sizes to measure Winograd performance.

[1/1] Testing with input size 364x364
  ✓ Created input tensor: torch.Size([1, 3, 364, 364]) on cpu
  GPU Memory - Allocated: 0.00 GB, Reserved: 0.00 GB
  Running warmup...
  ✓ Warmup completed
  GPU Memory after warmup - Allocated: 0.00 GB, Reserved: 0.00 GB
  Measuring performance over 10 iterations...
    Iteration 1/10
    Iteration 6/10
  ✓ Average execution time: 135.88 ms
  Top 5 slowest layers:
    features.2: 24.29 ms (17.9%) [winograd]
    features.0: 16.64 ms (12.2%) [winograd]
    features.7: 9.82 ms (7.2%) [winograd]
    features.5: 7.93 ms (5.8%) [winograd]
    features.14: 6.40 ms (4.7%) [winograd]

================================================================================
VGG16 WINOGRAD TESTING COMPLETED
================================================================================
Results saved to:
  - Overall performance: /home/wxs428/vgg16/winograd/VGG16_winograd_cuda_overall.csv
  - Layer-wise performance: /home/wxs428/vgg16/winograd/VGG16_winograd_cuda_layers.csv

Summary:
  ✓ Tested 1 different input sizes
  ✓ 10 iterations per input size
  ✓ Winograd algorithm optimization using AI3 library
  ✓ Comprehensive layer-wise performance analysis

Next steps:
  1. Analyze the CSV files to compare Winograd performance vs standard convolution
  2. Run the same test with different algorithms (direct, gemm, smm, etc.) for comparison
  3. Test on GPU (set device='cuda') for hardware-accelerated Winograd operations
================================================================================
(ai3_env) [wxs428@gput053 winograd]$ 