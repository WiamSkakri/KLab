name: MLOps CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Stage 1: Code Quality & Testing
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        pip install -r MLOps_Deployment/requirements.txt
        pip install pytest black flake8 pytest-cov
    
    - name: Code formatting check
      run: |
        black --check MLOps_Deployment/app/
    
    - name: Lint code
      run: |
        flake8 MLOps_Deployment/app/ --max-line-length=100
    
    - name: Run unit tests
      run: |
        cd MLOps_Deployment
        python -m pytest tests/ -v --cov=app --cov-report=xml
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./MLOps_Deployment/coverage.xml

  # Stage 2: Model Validation
  validate-models:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        pip install -r MLOps_Deployment/requirements.txt
    
    - name: Validate model files exist
      run: |
        python -c "
        from MLOps_Deployment.app.models.model_loader import ModelLoader
        import sys
        
        loader = ModelLoader(models_dir='CNN_Algorithms')
        discovered = loader.auto_discover_models()
        
        total_models = sum(len(models) for models in discovered.values())
        print(f'Discovered {total_models} models')
        
        if total_models == 0:
            print('ERROR: No models found!')
            sys.exit(1)
        
        for model_type, paths in discovered.items():
            print(f'{model_type}: {len(paths)} models')
        "
    
    - name: Test model loading
      run: |
        cd MLOps_Deployment
        python -c "
        from app.models.model_loader import ModelLoader
        
        loader = ModelLoader(models_dir='../CNN_Algorithms')
        load_results = loader.load_all_available_models()
        
        successful = sum(1 for success in load_results.values() if success)
        total = len(load_results)
        
        print(f'Successfully loaded {successful}/{total} models')
        
        if successful == 0:
            raise Exception('No models could be loaded!')
        "

  # Stage 3: Security Scanning
  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: 'MLOps_Deployment/'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Stage 4: Build Docker Images
  build:
    runs-on: ubuntu-latest
    needs: [test, validate-models]
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: MLOps_Deployment/
        file: MLOps_Deployment/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: MLOps_Deployment/
        file: MLOps_Deployment/Dockerfile.frontend
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Stage 5: Integration Testing
  integration-test:
    runs-on: ubuntu-latest
    needs: build
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Start services
      run: |
        cd MLOps_Deployment
        docker-compose -f docker-compose.test.yml up -d
    
    - name: Wait for services
      run: |
        sleep 60
        curl --retry 30 --retry-delay 2 --retry-connrefused http://localhost:8000/health
    
    - name: Run API integration tests
      run: |
        cd MLOps_Deployment
        python -m pytest tests/integration/ -v
    
    - name: Check service logs
      if: failure()
      run: |
        cd MLOps_Deployment
        docker-compose -f docker-compose.test.yml logs

  # Stage 6: Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build, integration-test]
    if: github.ref == 'refs/heads/develop'
    
    environment:
      name: staging
      url: https://staging.your-ml-api.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Here you would deploy to your staging environment
        # Example: kubectl, AWS ECS, etc.

  # Stage 7: Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, integration-test]
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://your-ml-api.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production..."
        # Production deployment commands
        # Example: ./deploy.sh production
    
    - name: Post-deployment health check
      run: |
        # Wait for deployment and check health
        sleep 30
        curl -f https://your-ml-api.com/health || exit 1
    
    - name: Notify team
      if: success()
      run: |
        echo "âœ… Production deployment successful!"
        # Send Slack/Teams notification

  # Stage 8: Monitor Deployment
  monitor:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Check metrics
      run: |
        # Check Prometheus metrics
        # Verify model performance hasn't degraded
        echo "Monitoring deployment metrics..."
    
    - name: Performance regression test
      run: |
        # Run performance benchmarks
        # Compare against baseline
        echo "Running performance regression tests..." 